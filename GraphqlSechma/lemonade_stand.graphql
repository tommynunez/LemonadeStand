"""
The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`.
"""
directive @defer(
  """
  If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to.
  """
  label: String

  """
  Deferred when true.
  """
  if: Boolean
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`.
"""
directive @stream(
  """
  If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to.
  """
  label: String

  """
  The initial elements that shall be send down to the consumer.
  """
  initialCount: Int! = 0

  """
  Streamed when true.
  """
  if: Boolean
) on FIELD

type Query {
  retrieveLemonadeTypeById(id: Int!): LemonadeType
  retrieveAllLemonadeTypes: [LemonadeType!]!
  products: [Product!]!
  retrieveProductById(id: Int!): Product
  retrieveOrders: [Order!]!
  retrieveSizeTypeById(id: Int!): Size
  retrieveAllSizes: [Size!]!
}

type Mutation {
  insertLemonadeType(lemonadeType: LemonadeTypeInput!): Boolean!
  updateLemonadeType(id: Int!, lemonadeType: LemonadeTypeInput!): Boolean!
  deleteLemonadeType(id: Int!): Boolean!
  insertOrder(order: OrderInput!): Int!
  insertSize(size: SizeInput!): Boolean!
  updateSize(id: Int!, size: SizeInput!): Boolean!
  deleteSize(id: Int!): Boolean!
  insertProduct(product: ProductMutationInput!): Boolean!
  updateProduct(id: Int!, product: ProductMutationInput!): Boolean!
  deleteProduct(id: Int!): Boolean!
}

type Size {
  id: Int
  name: String
}

type Order {
  id: Int
  firstName: String!
  lastName: String!
  email: String!
  phone: String!
  totalCost: Float!
  lineItems: [LineItem!]!
}

type Product {
  id: Int
  size: Size
  lemonadeType: LemonadeType
  amount: Float
}

type LemonadeType {
  id: Int!
  name: String
}

input ProductMutationInput {
  id: Int!
  sizeId: Int!
  lemonadeTypeId: Int!
  amount: Float!
}

input SizeInput {
  id: Int
  name: String
}

input OrderInput {
  id: Int
  firstName: String!
  lastName: String!
  email: String!
  phone: String!
  totalCost: Float!
  lineItems: [LineItemInput!]!
}

input LemonadeTypeInput {
  id: Int!
  name: String
}

input LineItemInput {
  quantity: Int!
  productId: Int!
  product: ProductInput
  cost: Float!
}

type LineItem {
  quantity: Int!
  productId: Int!
  product: Product
  cost: Float!
}

input ProductInput {
  id: Int
  size: SizeInput
  lemonadeType: LemonadeTypeInput
  amount: Float
}
